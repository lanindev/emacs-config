#+TITLE: Emacs configuration file
#+AUTHOR: Andrew Lanin
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+STARTUP: content

* Credits
Based on [[https://github.com/freetonik/emacs-dotfiles][Rakhim's config]]. Check out [[https://github.com/freetonik/emacscast][EmacsCast]], his podcast about Emacs.
* Installing
** Emacs
This config works best with [[https://emacsformacosx.com/][https://emacsformacosx.com/]].
** Dependencies
Few utils needed.

#+BEGIN_SRC sh :tangle no
brew install ripgrep # To search in files
brew install aspell # Spell checker
#+END_SRC
** Config
Make a backup of your old =.emacs.d=:

#+BEGIN_SRC sh :tangle no
mv ~/.emacs.d ~/.emacs.d-bak
#+END_SRC

Fork the repo, than clone it:

#+BEGIN_SRC sh :tangle no
git clone https://github.com/<username>/emacs-config .emacs.d
#+END_SRC

On the first run Emacs will install some packages. It's best to restart Emacs after that process is done for the first time.

There is no reason to track the =init.el= that is generated; by running the following command =git= will not bother tracking it:

#+BEGIN_SRC sh :tangle no
git update-index --assume-unchanged init.el
#+END_SRC

If one wishes to make changes to the repo-version of =init.el= start tracking again with:

#+BEGIN_SRC sh :tangle no
git update-index --no-assume-unchanged init.el
#+END_SRC
* General
** Load config
When this configuration is loaded for the first time, the =init.el= is the file that is loaded. It looks like this:

#+BEGIN_SRC emacs-lisp :tangle no
;; This file replaces itself with the actual configuration at first run.

(require 'org)
(find-file (concat user-emacs-directory "init.org"))
(org-babel-tangle)
(load-file (concat user-emacs-directory "init.el"))
(byte-compile-file (concat user-emacs-directory "init.el"))
#+END_SRC

But then it's being replaced by result of org file processing (tangling). Here begins real content of target emacs configuration.

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-

;; Tangle and compile this file on save automatically:
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
   tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)

;; This helps get rid of =functions might not be defined at runtime= warnings. See https://github.com/jwiegley/use-package/issues/590
;; (eval-when-compile
;;   (setq use-package-expand-minimally byte-compile-current-file))
#+END_SRC
** Package management
#+BEGIN_SRC emacs-lisp
;; Initialize package and add Melpa source.
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                 (not (gnutls-available-p))))
    (proto (if no-ssl "http" "https")))
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;; (add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    )
(package-initialize)

;; Covenient way to configure packages
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))
(setq use-package-always-ensure t)
#+END_SRC
** Modifier keys
#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'control)
(setq mac-right-command-modifier 'control)
(setq mac-control-modifier 'super)
(setq mac-right-control-modifier 'super)
(setq mac-option-modifier 'meta)
(setq mac-left-option-modifier 'meta)
;; Right Alt (option) can be used to enter symbols like em dashes =—=.
(setq mac-right-option-modifier 'nil)
#+END_SRC
** Application
#+BEGIN_SRC emacs-lisp
(setq
 inhibit-startup-message t         ; Don't show the startup message
 inhibit-startup-screen t          ; or screen
 initial-scratch-message nil       ; Empty scratch buffer
 confirm-kill-emacs 'y-or-n-p      ; y and n instead of yes and no when quitting
 column-number-mode t              ; show columns in addition to rows in mode line
)

(fset 'yes-or-no-p 'y-or-n-p)      ; y and n instead of yes and no everywhere else
(scroll-bar-mode -1)               ; ???
(tool-bar-mode -1)                 ; Disable toolbar

(add-to-list 'default-frame-alist '(ns-appearance . light)) ; ???

;; Initial window size
(setq initial-frame-alist '((width . 150) (height . 40)))

;; Window title
(setq-default frame-title-format "%f")

;; System PATH to run external commands
(use-package exec-path-from-shell)
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
#+END_SRC
** Files
#+BEGIN_SRC emacs-lisp
;; Turn off backups
(setq
 make-backup-files nil  ; stop creating backup~ files
 auto-save-default nil  ; stop creating #autosave# files
 create-lockfiles nil)  ; stop creating .# files

;; Update buffers automatically when underlying files are changed externally.
(global-auto-revert-mode t)

;; Save
(global-set-key (kbd "C-s") 'save-buffer)             ; save
(global-set-key (kbd "C-S-s") 'write-file)            ; save as
(global-set-key (kbd "C-q") 'save-buffers-kill-emacs) ; save and quit

;; Delete trailing whitespaces before save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; Ensure there is new line at the end of file
(setq require-final-newline t)
#+END_SRC
** Writing
#+BEGIN_SRC emacs-lisp
;; Set external spell checking command
(setq ispell-program-name "aspell")

;; Enable spellcheck on the fly for all text modes. This includes org, latex and LaTeX.
(add-hook 'text-mode-hook 'flyspell-mode)

;; Spellcheck current word.
(global-set-key (kbd "C-\\") 'ispell-word)

;; Search synonyms for the word
;; (use-package powerthesaurus
;;   :config
;;   (global-set-key (kbd "C-|") 'powerthesaurus-lookup-word-dwim))

;; Word definition
(use-package define-word
  :config
  (global-set-key (kbd "M-\\") 'define-word-at-point))

;; Expand abbreviations
;; TODO: Fill the dictionary
(clear-abbrev-table global-abbrev-table)
(define-abbrev-table 'global-abbrev-table
  '(
    ("em" "—")
    ("ra" "→" )
    ))
(abbrev-mode 1)
#+END_SRC
** Editing
#+BEGIN_SRC emacs-lisp
(setq
 echo-keystrokes 0.1               ; Show keystrokes right away, don't show the message in the scratch buffer
 sentence-end-double-space nil     ; Sentences should end in one space, come on!
 cursor-in-non-selected-windows t  ; Hide the cursor in inactive windows
 )

(blink-cursor-mode 0)     ; Disable blinking cursor
(delete-selection-mode 1) ; ???

;; Visual lines.
;; Wrap long lines and navigate by visual lines that you see on screen, not logical lines in file.
(global-visual-line-mode t)

;; Font
(set-face-attribute 'default nil :font "Iosevka 12")
(setq-default line-spacing 0)

;; Make emacs kill ring and system clipboard independent.
(use-package simpleclip
  :config
  (simpleclip-mode 1))

;; Copy/paste
(global-set-key (kbd "C-v") 'yank)
(global-set-key (kbd "C-x") 'kill-region)
(define-key input-decode-map (kbd "C-c") (kbd "M-w"))

;; Delete word/line
(global-set-key (kbd "s-<backspace>") 'kill-whole-line)
(global-set-key (kbd "M-<backspace>") 'kill-word)

;; Undo stack
(global-set-key (kbd "C-z") 'undo)

;; Move lines around with meta-up/down
(use-package move-text
  :config
  (move-text-default-bindings))

;; Insert new line above or below
(defun smart-open-line ()
  "Insert an empty line after the current line. Position the cursor at its beginning, according to the current mode."
  (interactive)
  (move-end-of-line nil)
  (newline-and-indent))

(defun smart-open-line-above ()
  "Insert an empty line above the current line. Position the cursor at it's beginning, according to the current mode."
  (interactive)
  (move-beginning-of-line nil)
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key (kbd "C-<return>") 'smart-open-line)
(global-set-key (kbd "C-S-<return>") 'smart-open-line-above)

;; Join multiple lines
(defun smart-join-line (beg end)
  "If in a region, join all the lines in it. If not, join the current line with the next line."
  (interactive "r")
  (if mark-active
      (join-region beg end)
      (top-join-line)))

(defun top-join-line ()
  "Join the current line with the next line."
  (interactive)
  (delete-indentation 1))

(defun join-region (_beg _end)
  "Join all the lines in the region."
  (interactive "r")
  (if mark-active
      (let ((beg (region-beginning))
            (end (copy-marker (region-end))))
        (goto-char beg)
        (while (< (point) end)
          (join-line 1)))))

(global-set-key (kbd "C-j") 'smart-join-line)

;; Convert to uppercase or lowercase
(global-set-key (kbd "M-u") 'upcase-dwim)
(global-set-key (kbd "M-l") 'downcase-dwim)

;; Select any region and edit it in another buffer.
;; TODO: Bindings?
(use-package edit-indirect)
#+END_SRC
** Navigation & marking
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-a") 'mark-whole-buffer)

;; Lines
(global-set-key (kbd "C-<up>") 'beginning-of-buffer)
(global-set-key (kbd "C-<down>") 'end-of-buffer)
(global-set-key (kbd "C-<right>") 'end-of-visual-line)
(global-set-key (kbd "C-<left>") (kbd "M-m"))
(global-set-key (kbd "C-S-<left>") (kbd "M-S-m"))
(global-set-key (kbd "C-l") 'goto-line)

;; Avy for fast navigation to particular character
(use-package avy
  :config
  (global-set-key (kbd "C-;") 'avy-goto-char-timer))

;; Navigation between marks (???)
(defun my-pop-local-mark-ring ()
  (interactive)
  (set-mark-command t))

(defun unpop-to-mark-command ()
  "Unpop off mark ring. Does nothing if mark ring is empty."
  (interactive)
      (when mark-ring
        (setq mark-ring (cons (copy-marker (mark-marker)) mark-ring))
        (set-marker (mark-marker) (car (last mark-ring)) (current-buffer))
        (when (null (mark t)) (ding))
        (setq mark-ring (nbutlast mark-ring))
        (goto-char (marker-position (car (last mark-ring))))))

(global-set-key (kbd "C-,") 'my-pop-local-mark-ring)
(global-set-key (kbd "C-.") 'unpop-to-mark-command)

;; Navigation between buffers
(global-set-key (kbd "C-<") 'previous-buffer)
(global-set-key (kbd "C->") 'next-buffer)

;; Expand-region allows to gradually expand selection inside words, sentences, etc.
(use-package expand-region
  :config
  (global-set-key (kbd "C-'") 'er/expand-region)
  (global-set-key (kbd "C-\"") 'er/contract-region))
#+END_SRC
** Search
#+BEGIN_SRC emacs-lisp
;; Generic completion library
(use-package ivy
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-re-builders-alist
      '((swiper         . ivy--regex-plus)
        (swiper-isearch . ivy--regex-plus)
        (counsel-ag     . ivy--regex-plus)
        (counsel-rg     . ivy--regex-plus)
        (t              . ivy--regex-fuzzy))) ; enable fuzzy searching everywhere except for Swiper and ag

  (global-set-key (kbd "C-b") 'ivy-switch-buffer))

;; Search inside file
(use-package swiper
  :config
  (global-set-key (kbd "C-f") 'swiper-isearch))

;; Replace with nice visual feedback
(use-package visual-regexp
  :config
  (define-key global-map (kbd "C-r") 'vr/replace))

;; Boost some standard emacs with ivy completion
(use-package counsel
  :config
  (global-set-key (kbd "M-x")     'counsel-M-x)
  (global-set-key (kbd "C-y")     'counsel-yank-pop)
  ;(global-set-key (kbd "???") 'counsel-find-file)
  (global-set-key (kbd "C-S-f")   'counsel-rg)
  (global-set-key (kbd "C-p")     'counsel-git))

;; When using git ls (via counsel-git), include unstaged files
(setq counsel-git-cmd "git ls-files --full-name --exclude-standard --others --cached --")

;; M-x enchancer, displays most frequently used commands first
(use-package smex)

;; Fuzzy matching engine
(use-package flx)
#+END_SRC
** Windows
#+BEGIN_SRC emacs-lisp
;; Always open files in the same frame, even when double-clicked from Finder.
(setq ns-pop-up-frames nil)

;; Split
(defun vsplit-last-buffer ()
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun hsplit-last-buffer ()
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))

(global-set-key (kbd "C-t") 'hsplit-last-buffer) ; horizontally
(global-set-key (kbd "C-S-t") 'vsplit-last-buffer) ; vertically

;; Close
(global-set-key (kbd "C-w") 'delete-window) ; close current (like in browser)
(global-set-key (kbd "C-S-w") 'delete-other-windows) ; close all others

;; Make new windows spawn on the bottom, not on the side
(setq split-height-threshold 0)
(setq split-width-threshold nil)

;; Move between windows
(use-package windmove
  :config
  (global-set-key (kbd "<C-M-left>")  'windmove-left)
  (global-set-key (kbd "<C-M-right>") 'windmove-right)
  (global-set-key (kbd "<C-M-up>")    'windmove-up)
  (global-set-key (kbd "<C-M-down>")  'windmove-down))

;; TODO: What is this?
(winner-mode 1)

;; Custom windows possitioning
(use-package shackle
  :init
  (setq shackle-default-alignment 'below
        shackle-default-size 0.4
        shackle-rules '((help-mode           :align below :select t)
                        (helpful-mode        :align below)
                        (compilation-mode    :select t   :size 0.25)
                        ("*compilation*"     :select nil :size 0.25)
                        ("*ag search*"       :select nil :size 0.25)
                        ("*Flycheck errors*" :select nil :size 0.25)
                        ("*Warnings*"        :select nil :size 0.25)
                        ("*Error*"           :select nil :size 0.25)
                        ("*Org Links*"       :select nil :size 0.1)
                        (magit-status-mode                :align bottom :size 0.5  :inhibit-window-quit t)
                        (magit-log-mode                   :same t                  :inhibit-window-quit t)
                        (magit-commit-mode                :ignore t)
                        (magit-diff-mode     :select nil  :align left   :size 0.5)
                        (git-commit-mode                  :same t)
                        (vc-annotate-mode                 :same t)
                        ))
  :config
  (shackle-mode 1))

;; Kill all buffers
(defun kill-all-buffers ()
  (interactive)
  (mapc 'kill-buffer (buffer-list)))
#+END_SRC
** Help
#+BEGIN_SRC emacs-lisp :tangle no
;; This is great for learning Emacs, it shows a nice table of possible commands.
(use-package which-key
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.5))
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq
   org-startup-indented t    ; Visually indent sections
   org-startup-truncated nil ; Do not truncate long lines
   org-directory      "~/OneDrive/org"
   org-agenda-files '("~/OneDrive/org")
   org-refile-targets (quote ((nil :maxlevel . 9)
                              (org-agenda-files :maxlevel . 9)))
   org-support-shift-select t     ; Allow shift selection with arrows
   org-src-tab-acts-natively t    ; Native tab behaviour for code blocks
   org-src-preserve-indentation t ; Native indentation for code blocks
   org-src-fontify-natively t     ; Native fonts for code blocks
   org-log-into-drawer t          ; State changes for todos and also notes should go into a Logbook drawer
   org-log-done 'time             ; Add closed date when todo goes to DONE state
   org-use-speed-commands t       ; Enable speed keys to manage headings without arrows (???)
   org-cycle-separator-lines 1    ; ???
   ))

;; <el<TAB> - insert snippet of elisp enclosure
(eval-after-load 'org
  '(progn
     (add-to-list 'org-structure-template-alist '("el" "#+BEGIN_SRC emacs-lisp \n?\n#+END_SRC"))
     (define-key org-mode-map (kbd "C-'") nil)
     (global-set-key "\C-ca" 'org-agenda)))

;; Quick files
(global-set-key (kbd "\e\ec") (lambda () (interactive) (find-file "~/.emacs.d/init.org")))
(global-set-key (kbd "\e\ei") (lambda () (interactive) (find-file "~/OneDrive/org/ideas.org")))
(global-set-key (kbd "\e\ef") (lambda () (interactive) (counsel-rg nil "~/OneDrive/org")))

;; ???
(global-set-key (kbd "C-c c") 'org-capture)

;; Disable some arrors-related bindings to enforce native behaviour
(define-key org-mode-map (kbd "S-<up>") nil)
(define-key org-mode-map (kbd "S-<down>") nil)
(define-key org-mode-map (kbd "S-<left>") nil)
(define-key org-mode-map (kbd "S-<right>") nil)
(define-key org-mode-map (kbd "<M-left>") nil)
(define-key org-mode-map (kbd "<M-right>") nil)
(define-key org-mode-map (kbd "<M-S-left>") nil)
(define-key org-mode-map (kbd "<M-S-right>") nil)

;; ???
(define-key org-mode-map (kbd "C-s-<left>") 'org-metaleft)
(define-key org-mode-map (kbd "C-s-<right>") 'org-metaright)

;; Focus on current subtree (hide/unhide everything else)
(define-key org-mode-map (kbd "C-s-<down>") 'org-narrow-to-subtree)
(define-key org-mode-map (kbd "C-s-<up>") 'widen)
#+END_SRC
* Programming
** General
#+BEGIN_SRC emacs-lisp
;; Turn off syntax highlighting
(global-font-lock-mode 0)

;; Indentations
(setq-default indent-tabs-mode nil)
(setq tab-width 2)
(setq js-indent-level 2)
(setq css-indent-offset 2)
(setq-default tab-width 2)

;; Matching parenthesis
(set-face-background 'show-paren-match "grey84")
(set-face-attribute 'show-paren-match nil :weight 'extra-bold)
(show-paren-mode)

;; Comment/uncomment line
(global-set-key (kbd "C-/") 'comment-line)
#+END_SRC
** Git
#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  (global-set-key (kbd "C-g") 'magit-status))

;; Bind Cmd+Shift+p to switch between repos
(setq magit-repository-directories '(("\~" . 1)))
(defun magit-status-with-prefix-arg ()
  "Call `magit-status` with a prefix."
  (interactive)
  (let ((current-prefix-arg '(4)))
    (call-interactively #'magit-status)))
(global-set-key (kbd "C-S-p") 'magit-status-with-prefix-arg)
#+END_SRC
** Terminal
#+BEGIN_SRC emacs-lisp
(use-package shell-pop)
#+END_SRC
** Navigation
#+BEGIN_SRC emacs-lisp
;; Jump to definition
;; Uses one of external commands: ag, ripgrep, rg, or grep
(use-package dumb-jump
  :config
  (dumb-jump-mode))
#+END_SRC
** Tree
#+BEGIN_SRC emacs-lisp
(use-package treemacs
  :ensure t
  :defer t
  :config
  (progn
    (setq treemacs-collapse-dirs                 (if treemacs-python-executable 3 0)
          treemacs-deferred-git-apply-delay      0.5
          treemacs-directory-name-transformer    #'identity
          treemacs-display-in-side-window        t
          treemacs-eldoc-display                 t
          treemacs-file-event-delay              5000
          treemacs-file-extension-regex          treemacs-last-period-regex-value
          treemacs-file-follow-delay             0.2
          treemacs-file-name-transformer         #'identity
          treemacs-follow-after-init             t
          treemacs-git-command-pipe              ""
          treemacs-goto-tag-strategy             'refetch-index
          treemacs-indentation                   2
          treemacs-indentation-string            " "
          treemacs-is-never-other-window         nil
          treemacs-max-git-entries               5000
          treemacs-missing-project-action        'ask
          treemacs-no-png-images                 t
          treemacs-no-delete-other-windows       t
          treemacs-project-follow-cleanup        nil
          treemacs-persist-file                  (expand-file-name "treemacs-workspaces" user-emacs-directory)
          treemacs-position                      'left
          treemacs-recenter-distance             0.1
          treemacs-recenter-after-file-follow    nil
          treemacs-recenter-after-tag-follow     nil
          treemacs-recenter-after-project-jump   'always
          treemacs-recenter-after-project-expand 'on-distance
          treemacs-show-cursor                   nil
          treemacs-show-hidden-files             t
          treemacs-silent-filewatch              nil
          treemacs-silent-refresh                nil
          treemacs-sorting                       'alphabetic-asc
          treemacs-space-between-root-nodes      t
          treemacs-tag-follow-cleanup            t
          treemacs-tag-follow-delay              1.5
          treemacs-user-mode-line-format         nil
          treemacs-width                         35)
    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-fringe-indicator-mode t)))
(treemacs)
#+END_SRC
** C++
Rules to live (and code) by for faithful Arcadia citizens.
Inspired by https://github.com/google/styleguide/blob/gh-pages/google-c-style.el
#+BEGIN_SRC emacs-lisp
(eval-when-compile (require 'cc-defs))

(defun arcadia-cpp-align-after-open-parentheses (langelem)
  (save-excursion
    (back-to-indentation)
    ;; Go to beginning of *previous* line:
    (c-backward-syntactic-ws)
    (back-to-indentation)
    (cond
     ;; We are making a reasonable assumption that if there is a control
     ;; structure to indent past, it has to be at the beginning of the line.
     ((looking-at "\\(\\(if\\|for\\|while\\)\\s *(\\)")
      (goto-char (match-end 1)))
     ;; For constructor initializer lists, the reference point for line-up is
     ;; the token after the initial colon.
     ((looking-at ":\\s *")
      (goto-char (match-end 0))))
    (vector (+ 4 (current-column)))))

(defconst arcadia-cpp-style
  `((c-recognize-knr-p . nil)
    (c-basic-offset . 4)
    (indent-tabs-mode . nil)
    (c-comment-only-line-offset . 0)
    (c-hanging-braces-alist . ((defun-open after)
                               (defun-close before after)
                               (class-open after)
                               (class-close before after)
                               (inexpr-class-open after)
                               (inexpr-class-close before)
                               (namespace-open after)
                               (inline-open after)
                               (inline-close before after)
                               (block-open after)
                               (block-close . c-snug-do-while)
                               (extern-lang-open after)
                               (extern-lang-close after)
                               (statement-case-open after)
                               (substatement-open after)))
    (c-hanging-colons-alist . ((case-label)
                               (label after)
                               (access-label after)
                               (member-init-intro before)
                               (inher-intro)))
    (c-hanging-semi&comma-criteria
     . (c-semi&comma-no-newlines-for-oneline-inliners
        c-semi&comma-inside-parenlist
        c-semi&comma-no-newlines-before-nonblanks))
    (c-indent-comments-syntactically-p . t)
    (comment-column . 40)
    (c-indent-comment-alist . ((other . (space . 2))))
    (c-cleanup-list . (brace-else-brace
                       brace-elseif-brace
                       brace-catch-brace
                       empty-defun-braces
                       defun-close-semi
                       list-close-comma
                       scope-operator))
    (c-offsets-alist . ((arglist-intro arcadia-cpp-align-after-open-parentheses)
                        (func-decl-cont . ++)
                        (member-init-intro . ++)
                        (inher-intro . ++)
                        (comment-intro . 0)
                        (arglist-close . c-lineup-arglist)
                        (topmost-intro . 0)
                        (block-open . 0)
                        (inline-open . 0)
                        (substatement-open . 0)
                        (statement-cont
                         .
                         (,(when (fboundp 'c-no-indent-after-java-annotations)
                             'c-no-indent-after-java-annotations)
                          ,(when (fboundp 'c-lineup-assignments)
                             'c-lineup-assignments)
                          ++))
                        (label . /)
                        (case-label . +)
                        (statement-case-open . +)
                        (statement-case-intro . +) ; case w/o {
                        (access-label . /)
                        (innamespace . 4))))
  "Arcadia C++ Style.")

(defun apply-arcadia-cpp-style ()
  (interactive)
  (make-local-variable 'c-tab-always-indent)
  (setq c-tab-always-indent t)
  (c-add-style "Arcadia" arcadia-cpp-style t))

(add-hook 'c-mode-common-hook 'apply-arcadia-cpp-style)
#+END_SRC

Additional syntax.
#+BEGIN_SRC emacs-lisp
(use-package cmake-mode)
#+END_SRC
** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'"       . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc")
  :commands (markdown-mode gfm-mode))



;; Focus mode like one in org
(eval-after-load 'markdown-mode
  `(define-key markdown-mode-map (kbd "C-s-<down>") 'markdown-narrow-to-subtree))
(eval-after-load 'markdown-mode
  `(define-key markdown-mode-map (kbd "C-s-<up>") 'widen))

;; ???
(eval-after-load 'markdown-mode
  `(define-key markdown-mode-map (kbd "s-O") (lambda ()
                                               (interactive)
                                               (markdown-kill-ring-save)
                                               (save-current-buffer
                                                 (set-buffer "*markdown-output*")
                                                 (with-no-warnings (mark-whole-buffer))
                                                 (simpleclip-copy (point-min) (point-max))))))

(require 'markdown-mode)
#+END_SRC
** LISPs
#+BEGIN_SRC emacs-lisp
;; (use-package paredit
;;   :init
;;   (progn
;;     (add-hook 'emacs-lisp-mode-hook    'paredit-mode)
;;     (add-hook 'clojure-mode-hook       'paredit-mode)
;;     (add-hook 'clojurescript-mode-hook 'paredit-mode)
;;     (add-hook 'clojurec-mode-hook      'paredit-mode)
;;     (add-hook 'cider-repl-mode-hook    'paredit-mode)))

(use-package clojure-mode)
;; (use-package cider)

;; (use-package clj-refactor)
;; (add-hook 'clojure-mode-hook
;;           (lambda ()
;;             (clj-refactor-mode 1)
;;             (yas-minor-mode 1) ; for adding require/use/import statements
;;             ;; This choice of keybinding leaves cider-macroexpand-1 unbound
;;             (cljr-add-keybindings-with-prefix "C-c C-m")))
#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :config
  (setq rust-format-on-save t))
#+END_SRC
** Go
#+BEGIN_SRC emacs-lisp
(use-package go-mode
  :config
  (setq gofmt-command "goimports")
  (add-hook 'go-mode-hook
          (lambda ()
            (add-hook 'before-save-hook 'gofmt-before-save)
            (setq tab-width 2))))
#+END_SRC
** Web
#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode ("\\.html\\'" "\\.js\\'" "\\.jsx\\'" "\\.css\\'")
  :config
  (setq
   web-mode-markup-indent-offset 2
   web-mode-css-indent-offset    2
   web-mode-code-indent-offset   2
   web-mode-tag-auto-close-style 0 ; Turn off buggy tag auto-close
   ))

;; Use jsx instead of javascript syntax
(add-hook 'web-mode-hook
          (lambda ()
            (if (equal web-mode-content-type "javascript")
                (web-mode-set-content-type "jsx"))))

;; Rapid markup generation
(use-package emmet-mode
  :init
  (setq emmet-indentation 2)
  (setq emmet-move-cursor-between-quotes t)
  :config
  (add-hook 'sgml-mode-hook 'emmet-mode) ; Auto-start on any markup modes
  (add-hook 'web-mode-hook  'emmet-mode)
  (add-hook 'html-mode-hook 'emmet-mode)
  (add-hook 'css-mode-hook  'emmet-mode)
  :commands emmet-mode)
#+END_SRC
** YAML
#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
#+END_SRC
* Server
#+BEGIN_SRC emacs-lisp
;; Start an Emacs server. This way, it is possible to use emacsclient from the terminal.
(unless (server-running-p) (server-start))
#+END_SRC

To enable easy emacsclient, create =~/bin/ec=:

#+BEGIN_SRC sh :tangle no
#!/bin/sh
# this assumes that my regular emacs app runs the server as part of startup
emacsclient -n "$@" || (open -a emacs "$@")
#+END_SRC
