#+TITLE: Emacs configuration file
#+AUTHOR: Andrew Lanin
#+AUTHOR: Rakhim Davletkaliyev
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes
#+STARTUP: overview

* Credits
Based on [[https://github.com/freetonik/emacs-dotfiles][Rakhim's config]]. Check out [[https://github.com/freetonik/emacscast][EmacsCast]], his podcast about Emacs.
* Installing
** Emacs
This config works best with this [[https://emacsformacosx.com/][https://emacsformacosx.com/]].
** Dependencies
Few utils needed.

#+BEGIN_SRC sh :tangle no
brew install ripgrep # TODO: Why?
brew cask install mactex # TODO: Why?
brew install aspell # Spell checker
#+END_SRC
** Config
Make a backup of your old =.emacs.d=:

#+BEGIN_SRC sh :tangle no
mv ~/.emacs.d ~/.emacs.d-bak
#+END_SRC

Fork the repo, than clone it:

#+BEGIN_SRC sh :tangle no
git clone https://github.com/<username>/emacs-config .emacs.d
#+END_SRC

On the first run Emacs will install some packages. It's best to restart Emacs after that process is done for the first time.

There is no reason to track the =init.el= that is generated; by running the following command =git= will not bother tracking it:

#+BEGIN_SRC sh :tangle no
git update-index --assume-unchanged init.el
#+END_SRC

If one wishes to make changes to the repo-version of =init.el= start tracking again with:

#+BEGIN_SRC sh :tangle no
git update-index --no-assume-unchanged init.el
#+END_SRC
* General
** Load config
When this configuration is loaded for the first time, the =init.el= is the file that is loaded. It looks like this:

#+BEGIN_SRC emacs-lisp :tangle no
;; This file replaces itself with the actual configuration at first run.

(require 'org)
(find-file (concat user-emacs-directory "init.org"))
(org-babel-tangle)
(load-file (concat user-emacs-directory "init.el"))
(byte-compile-file (concat user-emacs-directory "init.el"))
#+END_SRC

Lexical scoping for the init-file is needed, it can be specified in the header. This is the first line of the actual configuration:

#+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
#+END_SRC

Tangle and compile this file on save automatically:

#+BEGIN_SRC emacs-lisp
(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
   tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      (byte-compile-file (concat user-emacs-directory "init.el")))))

(add-hook 'after-save-hook 'tangle-init)
#+END_SRC

This helps get rid of =functions might not be defined at runtime= warnings. See https://github.com/jwiegley/use-package/issues/590

#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (setq use-package-expand-minimally byte-compile-current-file))
#+END_SRC
** Package management
Initialize package and add Melpa source.

#+BEGIN_SRC emacs-lisp
(require 'package)
(let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                 (not (gnutls-available-p))))
    (proto (if no-ssl "http" "https")))
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    )
(package-initialize)
#+END_SRC

Install use-package.

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile (require 'use-package))

(setq use-package-always-ensure t)
#+END_SRC
** Modifier keys
#+BEGIN_SRC emacs-lisp
(setq mac-command-modifier 'super)
(setq mac-right-command-modifier 'super)
(setq mac-option-modifier 'meta)
(setq mac-left-option-modifier 'meta)
;; Right Alt (option) can be used to enter symbols like em dashes =â€”=.
(setq mac-right-option-modifier 'nil)
#+END_SRC
** Emacs application
#+BEGIN_SRC emacs-lisp
(setq
 inhibit-startup-message t         ; Don't show the startup message
 inhibit-startup-screen t          ; or screen
 initial-scratch-message nil       ; Empty scratch buffer
 confirm-kill-emacs 'y-or-n-p      ; y and n instead of yes and no when quitting
 column-number-mode t              ; show columns in addition to rows in mode line
)

(fset 'yes-or-no-p 'y-or-n-p)      ; y and n instead of yes and no everywhere else
(scroll-bar-mode -1)               ; ???
(tool-bar-mode -1)                 ; Disable toolbar

(add-to-list 'default-frame-alist '(ns-appearance . light)) ; ???

;; Initial window size
(setq initial-frame-alist '((width . 150) (height . 40)))

;; Window title
(setq-default frame-title-format "%f")
#+END_SRC
** Files
#+BEGIN_SRC emacs-lisp
;; Turn off backups
(setq
 make-backup-files nil  ; stop creating backup~ files
 auto-save-default nil  ; stop creating #autosave# files
 create-lockfiles nil)  ; stop creating .# files

;; Update buffers automatically when underlying files are changed externally.
(global-auto-revert-mode t)
#+END_SRC
** Editor
#+BEGIN_SRC emacs-lisp
(setq
 echo-keystrokes 0.1               ; Show keystrokes right away, don't show the message in the scratch buffer
 sentence-end-double-space nil     ; Sentences should end in one space, come on!
 cursor-in-non-selected-windows t  ; Hide the cursor in inactive windows
 )

(blink-cursor-mode 0)     ; Disable blinking cursor
(delete-selection-mode 1) ; ???

;; Visual lines.
;; Wrap long lines and navigate by visual lines that you see on screen, not logical lines in file.
(global-visual-line-mode t)

(set-face-attribute 'default nil :font "Inconsolata LGC 14")
(setq-default line-spacing 0)

;; I want Emacs kill ring and system clipboard to be independent. Simpleclip is the solution to that.
(use-package simpleclip
  :config
  (simpleclip-mode 1))

;; Matching parenthesis
(set-face-background 'show-paren-match "grey84")
(set-face-attribute 'show-paren-match nil :weight 'extra-bold)
(show-paren-mode)

;; Indentations
(setq-default indent-tabs-mode nil)
(setq tab-width 2)
(setq js-indent-level 2)
(setq css-indent-offset 2)
(setq-default c-basic-offset 2)
(setq c-basic-offset 2)
(setq-default tab-width 2)
(setq-default c-basic-indent 2)
#+END_SRC
* Configurations
** OS integration

Pass system shell environment to Emacs. This is important primarily for shell inside Emacs, but also things like Org mode export to Tex PDF don't work, since it relies on running external command =pdflatex=, which is loaded from =PATH=.

#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell)

(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
#+END_SRC

A nice little real terminal in a popup.

#+BEGIN_SRC emacs-lisp
(use-package shell-pop)
#+END_SRC
** Navigation and editing

Kill line with =s-Backspace=, which is =Cmd-Backspace=. Note that thanks to Simpleclip, killing doesn't rewrite the system clipboard. Kill one word by =Alt-Backspace=. Also, kill forward word with =Alt-Shift-Backspace=, since =Alt-Backspace= is kill word backwards.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-<backspace>") 'kill-whole-line)
(global-set-key (kbd "M-S-<backspace>") 'kill-word)
#+END_SRC

Use =super= (which is =Cmd=) for movement and selection just like in macOS.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-<right>") 'end-of-visual-line)
(global-set-key (kbd "s-<left>") (kbd "M-m"))
(global-set-key (kbd "S-s-<left>") (kbd "M-S-m"))

(global-set-key (kbd "s-<up>") 'beginning-of-buffer)
(global-set-key (kbd "s-<down>") 'end-of-buffer)

(global-set-key (kbd "s-l") 'goto-line)
#+END_SRC

Basic things you should expect from macOS.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-a") 'mark-whole-buffer)       ;; select all
(global-set-key (kbd "s-s") 'save-buffer)             ;; save
(global-set-key (kbd "s-S") 'write-file)              ;; save as
(global-set-key (kbd "s-q") 'save-buffers-kill-emacs) ;; quit
(global-set-key (kbd "s-z") 'undo)                    ;; undo
#+END_SRC

Avy for fast navigation.

#+BEGIN_SRC emacs-lisp
(use-package avy
  :config
  (global-set-key (kbd "s-;") 'avy-goto-char-timer))
#+END_SRC

Go back to previous mark (position) within buffer and go back (forward?).

#+BEGIN_SRC emacs-lisp
(defun my-pop-local-mark-ring ()
  (interactive)
  (set-mark-command t))

(defun unpop-to-mark-command ()
  "Unpop off mark ring. Does nothing if mark ring is empty."
  (interactive)
      (when mark-ring
        (setq mark-ring (cons (copy-marker (mark-marker)) mark-ring))
        (set-marker (mark-marker) (car (last mark-ring)) (current-buffer))
        (when (null (mark t)) (ding))
        (setq mark-ring (nbutlast mark-ring))
        (goto-char (marker-position (car (last mark-ring))))))

(global-set-key (kbd "s-,") 'my-pop-local-mark-ring)
(global-set-key (kbd "s-.") 'unpop-to-mark-command)
#+END_SRC

Since =Cmd+,= and =Cmd+.= move you back in forward in the current buffer, the same keys with =Shift= move you back and forward between open buffers.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-<") 'previous-buffer)
(global-set-key (kbd "s->") 'next-buffer)
#+END_SRC

Go to other windows easily with one keystroke =s-something= instead of =C-x something=.

#+BEGIN_SRC emacs-lisp
(defun vsplit-last-buffer ()
  (interactive)
  (split-window-vertically)
  (other-window 1 nil)
  (switch-to-next-buffer))

(defun hsplit-last-buffer ()
  (interactive)
  (split-window-horizontally)
  (other-window 1 nil)
  (switch-to-next-buffer))

(global-set-key (kbd "s-w") (kbd "C-x 0")) ;; just like close tab in a web browser
(global-set-key (kbd "s-W") (kbd "C-x 1")) ;; close others with shift

(global-set-key (kbd "s-T") 'vsplit-last-buffer)
(global-set-key (kbd "s-t") 'hsplit-last-buffer)
#+END_SRC

Expand-region allows to gradually expand selection inside words, sentences, etc. =C-'= is bound to Org's =cycle through agenda files=, which I don't really use, so I unbind it here before assigning global shortcut for expansion.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :config
  (global-set-key (kbd "s-'") 'er/expand-region)
  (global-set-key (kbd "s-\"") 'er/contract-region))

#+END_SRC

=Move-text= allows moving lines around with meta-up/down.

#+BEGIN_SRC emacs-lisp
(use-package move-text
  :config
  (move-text-default-bindings))
#+END_SRC

Smarter open-line by [[http://emacsredux.com/blog/2013/03/26/smarter-open-line/][bbatsov]]. Once again, I'm taking advantage of CMD and using it to quickly insert new lines above or below the current line, with correct indentation and stuff.

#+BEGIN_SRC emacs-lisp
(defun smart-open-line ()
  "Insert an empty line after the current line. Position the cursor at its beginning, according to the current mode."
  (interactive)
  (move-end-of-line nil)
  (newline-and-indent))

(defun smart-open-line-above ()
  "Insert an empty line above the current line. Position the cursor at it's beginning, according to the current mode."
  (interactive)
  (move-beginning-of-line nil)
  (newline-and-indent)
  (forward-line -1)
  (indent-according-to-mode))

(global-set-key (kbd "s-<return>") 'smart-open-line)
(global-set-key (kbd "s-S-<return>") 'smart-open-line-above)
#+END_SRC

Join lines whether you're in a region or not.

#+BEGIN_SRC emacs-lisp
(defun smart-join-line (beg end)
  "If in a region, join all the lines in it. If not, join the current line with the next line."
  (interactive "r")
  (if mark-active
      (join-region beg end)
      (top-join-line)))

(defun top-join-line ()
  "Join the current line with the next line."
  (interactive)
  (delete-indentation 1))

(defun join-region (_beg _end)
  "Join all the lines in the region."
  (interactive "r")
  (if mark-active
      (let ((beg (region-beginning))
            (end (copy-marker (region-end))))
        (goto-char beg)
        (while (< (point) end)
          (join-line 1)))))

(global-set-key (kbd "s-j") 'smart-join-line)
#+END_SRC

Upcase word and region using the same keys.

#+Begin_SRC emacs-lisp
(global-set-key (kbd "M-u") 'upcase-dwim)
(global-set-key (kbd "M-l") 'downcase-dwim)
#+END_SRC

Provide nice visual feedback for replace.

#+BEGIN_SRC emacs-lisp
(use-package visual-regexp
  :config
  (define-key global-map (kbd "s-r") 'vr/replace))
#+END_SRC

Delete trailing spaces and add new line in the end of a file on save.

#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
(setq require-final-newline t)
#+END_SRC

Multiple cusors are a must. Make <return> insert a newline; multiple-cursors-mode can still be disabled with C-g.

#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :config
  (setq mc/always-run-for-all 1)
  (global-set-key (kbd "s-d") 'mc/mark-next-like-this)
  (global-set-key (kbd "s-D") 'mc/mark-all-dwim)
  (define-key mc/keymap (kbd "<return>") nil))
#+END_SRC

Comment lines.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-/") 'comment-line)
#+END_SRC
** Windows

I'm still not happy with the way new windows are spawned. For now, at least, let's make it so that new automatic windows are always created on the bottom, not on the side.

#+BEGIN_SRC emacs-lisp
(setq split-height-threshold 0)
(setq split-width-threshold nil)
#+END_SRC

Move between windows with Control-Command-Arrow and with =Cmd= just like in iTerm.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-o") (kbd "C-x o"))

(use-package windmove
  :config
  (global-set-key (kbd "s-[")  'windmove-left)         ;; Cmd+[ go to left window
  (global-set-key (kbd "s-]")  'windmove-right)        ;; Cmd+] go to right window
  (global-set-key (kbd "s-{")  'windmove-up)           ;; Cmd+Shift+[ go to upper window
  (global-set-key (kbd "<s-}>")  'windmove-down))      ;; Ctrl+Shift+[ go to down window
#+END_SRC

Enable winner mode to quickly restore window configurations

#+BEGIN_SRC emacs-lisp
(winner-mode 1)
#+END_SRC

Shackle to make sure all windows are nicely positioned.

#+BEGIN_SRC emacs-lisp
(use-package shackle
  :init
  (setq shackle-default-alignment 'below
        shackle-default-size 0.4
        shackle-rules '((help-mode           :align below :select t)
                        (helpful-mode        :align below)
                        (compilation-mode    :select t   :size 0.25)
                        ("*compilation*"     :select nil :size 0.25)
                        ("*ag search*"       :select nil :size 0.25)
                        ("*Flycheck errors*" :select nil :size 0.25)
                        ("*Warnings*"        :select nil :size 0.25)
                        ("*Error*"           :select nil :size 0.25)
                        ("*Org Links*"       :select nil :size 0.1)
                        (magit-status-mode                :align bottom :size 0.5  :inhibit-window-quit t)
                        (magit-log-mode                   :same t                  :inhibit-window-quit t)
                        (magit-commit-mode                :ignore t)
                        (magit-diff-mode     :select nil  :align left   :size 0.5)
                        (git-commit-mode                  :same t)
                        (vc-annotate-mode                 :same t)
                        ))
  :config
  (shackle-mode 1))
#+END_SRC
** Edit indirect

Select any region and edit it in another buffer.

#+BEGIN_SRC emacs-lisp
(use-package edit-indirect)
#+END_SRC
** Ivy, Swiper and Counsel

#+BEGIN_SRC emacs-lisp
(use-package ivy
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  (setq ivy-initial-inputs-alist nil)
  (setq ivy-re-builders-alist
      '((swiper . ivy--regex-plus)
        (swiper-isearch . ivy--regex-plus)
        (counsel-ag . ivy--regex-plus)
        (counsel-rg . ivy--regex-plus)
        (t      . ivy--regex-fuzzy)))   ;; enable fuzzy searching everywhere except for Swiper and ag

  (global-set-key (kbd "s-b") 'ivy-switch-buffer))

(use-package swiper
  :config
  (global-set-key (kbd "s-f") 'swiper-isearch))

(use-package counsel
  :config
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "s-y") 'counsel-yank-pop)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "s-F") 'counsel-rg)
  (global-set-key (kbd "s-p") 'counsel-git))

;; When using git ls (via counsel-git), include unstaged files
(setq counsel-git-cmd "git ls-files --full-name --exclude-standard --others --cached --")

(use-package smex)
(use-package flx)
#+END_SRC
** Git

It's time for Magit!

#+BEGIN_SRC emacs-lisp
(use-package magit
  :config
  (global-set-key (kbd "s-g") 'magit-status))
#+END_SRC

Navigate to projects with Cmd+Shift+P (thanks to reddit user and emacscast listener fritzgrabo).

#+BEGIN_SRC emacs-lisp
(setq magit-repository-directories '(("\~/code" . 4) ("\~/Google Drive/Codexpanse/Course materials" . 3)))

(defun magit-status-with-prefix-arg ()
  "Call `magit-status` with a prefix."
  (interactive)
  (let ((current-prefix-arg '(4)))
    (call-interactively #'magit-status)))

(global-set-key (kbd "s-P") 'magit-status-with-prefix-arg)
#+END_SRC
** Spell checking

Spell checking requires an external command to be available. Install =aspell= on your Mac, then make it the default checker for Emacs' =ispell=. Note that personal dictionary is located at =~/.aspell.LANG.pws= by default.

#+BEGIN_SRC emacs-lisp
(setq ispell-program-name "aspell")
#+END_SRC

Enable spellcheck on the fly for all text modes. This includes org, latex and LaTeX.

#+BEGIN_SRC emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)
#+END_SRC

Spellcheck current word.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "s-\\") 'ispell-word)
#+END_SRC
** Thesaurus

Spellcheck was =Cmd+\=, synonym search is =Cmd+Shift+\=.

#+BEGIN_SRC emacs-lisp
(use-package powerthesaurus
  :config
  (global-set-key (kbd "s-|") 'powerthesaurus-lookup-word-dwim))
#+END_SRC

Word definition search.

#+BEGIN_SRC emacs-lisp
(use-package define-word
  :config
  (global-set-key (kbd "M-\\") 'define-word-at-point))
#+END_SRC
** Abbrev

#+BEGIN_SRC emacs-lisp
(clear-abbrev-table global-abbrev-table)

(define-abbrev-table 'global-abbrev-table
  '(
    ("afaik" "as far as i know" )
    ("em" "â€”")
    ("ra" "â†’" )
    ))
#+END_SRC
** Auto completion

#+BEGIN_SRC emacs-lisp
(use-package company
  :config
  (setq company-idle-delay 0.1)
  (setq company-global-modes '(not org-mode markdown-mode))
  (setq company-minimum-prefix-length 1)
  (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
** Markdown

While I prefer Org, I still need to be able to work with Markdown efficiently. Here's a good package and "Cmd-O" to copy raw HTML to clipboard.

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "pandoc"))

(eval-after-load 'markdown-mode
  `(define-key markdown-mode-map (kbd "C-s-<down>") 'markdown-narrow-to-subtree))

(eval-after-load 'markdown-mode
  `(define-key markdown-mode-map (kbd "C-s-<up>") 'widen))

(require 'markdown-mode)
(eval-after-load 'markdown-mode
  `(define-key markdown-mode-map (kbd "s-O") (lambda ()
                                               (interactive)
                                               (markdown-kill-ring-save)
                                               (save-current-buffer
                                                 (set-buffer "*markdown-output*")
                                                 (with-no-warnings (mark-whole-buffer))
                                                 (simpleclip-copy (point-min) (point-max))))))
#+END_SRC
** Packages for programming

Here are all the packages needed for programming languages and formats.

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode)
(use-package dumb-jump
  :config
  (dumb-jump-mode))
#+END_SRC

LISP.

#+BEGIN_SRC emacs-lisp
(use-package paredit
  :init
  (progn
    (add-hook 'emacs-lisp-mode-hook 'paredit-mode)
    (add-hook 'clojure-mode-hook 'paredit-mode)
    (add-hook 'clojurescript-mode-hook 'paredit-mode)
    (add-hook 'clojurec-mode-hook 'paredit-mode)
    (add-hook 'cider-repl-mode-hook 'paredit-mode)))
#+END_SRC

Clojure.

#+BEGIN_SRC emacs-lisp
(use-package clojure-mode)
(use-package cider)

(use-package clj-refactor)
(add-hook 'clojure-mode-hook
          (lambda ()
            (clj-refactor-mode 1)
            (yas-minor-mode 1) ; for adding require/use/import statements
            ;; This choice of keybinding leaves cider-macroexpand-1 unbound
            (cljr-add-keybindings-with-prefix "C-c C-m")))
#+END_SRC

Web mode.

#+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode ("\\.html\\'" "\\.js\\'" "\\.jsx\\'" "\\.css\\'")
  :config
  (setq web-mode-markup-indent-offset 2))

(add-hook 'web-mode-hook
          (lambda ()
            ;; short circuit js mode and just do everything in jsx-mode
            (if (equal web-mode-content-type "javascript")
                (web-mode-set-content-type "jsx"))))
#+END_SRC

Emmet.

#+BEGIN_SRC emacs-lisp
(use-package emmet-mode
  :commands emmet-mode
  :init
  (setq emmet-indentation 2)
  (setq emmet-move-cursor-between-quotes t)
  :config
  (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
  (add-hook 'web-mode-hook  'emmet-mode)
  (add-hook 'html-mode-hook  'emmet-mode)
  (add-hook 'css-mode-hook  'emmet-mode)) ;; enable Emmet's css abbreviation.
#+END_SRC

Rust.

#+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :config
  (setq rust-format-on-save t))
#+END_SRC

Go.

#+BEGIN_SRC emacs-lisp
(use-package go-mode)
#+END_SRC
** Frames, windows, buffers

Always open files in the same frame, even when double-clicked from Finder.

#+BEGIN_SRC emacs-lisp
(setq ns-pop-up-frames nil)
#+END_SRC

Handy killall command.

#+BEGIN_SRC emacs-lisp
(defun kill-all-buffers ()
  (interactive)
  (mapc 'kill-buffer (buffer-list)))
#+END_SRC
** Which key

This is great for learning Emacs, it shows a nice table of possible commands.

#+BEGIN_SRC emacs-lisp :tangle no
(use-package which-key
  :config
  (which-key-mode)
  (setq which-key-idle-delay 0.5))
#+END_SRC
* Org
#+BEGIN_SRC emacs-lisp
(use-package org
  :config
  (setq org-startup-indented t)    ; Visually indent sections
  (setq org-startup-truncated nil) ; Do not truncate long lines
)
#+END_SRC

Set directory for ORG files.

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/OneDrive/org")
#+END_SRC

And all of those files should be in included agenda.

#+BEGIN_SRC emacs-lisp
(setq org-agenda-files '("~/OneDrive/org"))
#+END_SRC

Refile targets should include files and down to 9 levels into them.

#+BEGIN_SRC emacs-lisp
(setq org-refile-targets (quote ((nil :maxlevel . 9)
                                 (org-agenda-files :maxlevel . 9))))

#+END_SRC

Allow shift selection with arrows. This will not interfere with some built-in shift+arrow functionality in Org.

#+BEGIN_SRC emacs-lisp
(setq org-support-shift-select t)
#+END_SRC

While writing this configuration file in Org mode, I have to write code blocks all the time. Org has templates, so doing =<s TAB= creates a source code block. Here I create a custom template for emacs-lisp specifically. So, =<el TAB= creates the Emacs lisp code block and puts the cursor inside.

#+BEGIN_SRC emacs-lisp
(eval-after-load 'org
  '(progn
    (add-to-list 'org-structure-template-alist '("el" "#+BEGIN_SRC emacs-lisp \n?\n#+END_SRC"))
    (define-key org-mode-map (kbd "C-'") nil)
    (global-set-key "\C-ca" 'org-agenda)))
#+END_SRC

And inside those code blocks indentation should be correct depending on the source language used and have code highlighting.

#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
(setq org-src-preserve-indentation t)
(setq org-src-fontify-natively t)
#+END_SRC

State changes for todos and also notes should go into a Logbook drawer:

#+BEGIN_SRC emacs-lisp
(setq org-log-into-drawer t)
#+END_SRC

Quickly open todo and config files.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "\e\ec") (lambda () (interactive) (find-file "~/.emacs.d/init.org")))
(global-set-key (kbd "\e\ei") (lambda () (interactive) (find-file "~/OneDrive/org/ideas.org")))
(global-set-key (kbd "\e\ef") (lambda () (interactive) (counsel-rg nil "~/OneDrive/org")))
#+END_SRC

Org capture.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq org-cycle-separator-lines 1)
#+END_SRC

Add closed date when todo goes to DONE state.

#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC

Not sure about this... I want to retain Shift-Alt movement and selection everywhere, but in Org mode these bindings are important built ins, and I don't know if there is a viable alternative.

Consider switching meta-left/right to =C-c C-,= and =C-c C-.=. These are used to promote and demote subtrees.

#+BEGIN_SRC emacs-lisp
;; no shift or alt with arrows
(define-key org-mode-map (kbd "S-<up>") nil)
(define-key org-mode-map (kbd "S-<down>") nil)
(define-key org-mode-map (kbd "S-<left>") nil)
(define-key org-mode-map (kbd "S-<right>") nil)
(define-key org-mode-map (kbd "<M-left>") nil)
(define-key org-mode-map (kbd "<M-right>") nil)
;; no shift-alt with arrows
(define-key org-mode-map (kbd "<M-S-left>") nil)
(define-key org-mode-map (kbd "<M-S-right>") nil)

(define-key org-mode-map (kbd "C-s-<left>") 'org-metaleft)
(define-key org-mode-map (kbd "C-s-<right>") 'org-metaright)
#+END_SRC

Enable speed keys to manage headings without arrows.

#+BEGIN_SRC emacs-lisp
(setq org-use-speed-commands t)
#+END_SRC

Narrow and widen with =Cmd+Ctrl+Up/Down=.

#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "C-s-<down>") 'org-narrow-to-subtree)
(define-key org-mode-map (kbd "C-s-<up>") 'widen)
#+END_SRC
* Emacs server

Start an Emacs server. This way, I can use emacsclient from the terminal.

#+BEGIN_SRC emacs-lisp
(unless (server-running-p) (server-start))
#+END_SRC

To enable easy emacsclient, create =~/bin/ec=:

#+BEGIN_SRC sh :tangle no
#!/bin/sh
# this assumes that my regular emacs app runs the server as part of startup
emacsclient -n "$@" || (open -a emacs "$@")
#+END_SRC
